#!/usr/bin/with-contenv bash

if [ "${UNBOUND_ENABLED}" -ne 1 ]; then
    rm -f /var/run/service/unbound/notification-fd
    exit 0
fi

reserved=12582912
availableMemory=$((1024 * $( (grep MemAvailable /proc/meminfo || grep MemTotal /proc/meminfo) | sed 's/[^0-9]//g' ) ))
memoryLimit=$availableMemory
[ -r /sys/fs/cgroup/memory/memory.limit_in_bytes ] && memoryLimit=$(< /sys/fs/cgroup/memory/memory.limit_in_bytes sed 's/[^0-9]//g')
[ -r /sys/fs/cgroup/memory.max ] && memoryLimit=$(< /sys/fs/cgroup/memory.max sed 's/[^0-9]//g')
[[ -n $memoryLimit && $memoryLimit -gt 0 && $memoryLimit -lt $availableMemory ]] && availableMemory=$memoryLimit
if [ "$availableMemory" -le $((reserved * 2)) ]; then
    echo "Not enough memory" >&2
    exit 1
fi
availableMemory=$((availableMemory - reserved))
rr_cache_size=$((availableMemory / 3))
# Use roughly twice as much rrset cache memory as msg cache memory
msg_cache_size=$((rr_cache_size / 2))
nproc=$(nproc)
export nproc
if [ "$nproc" -gt 1 ]; then
    threads=$((nproc - 1))
    # Calculate base 2 log of the number of processors
    nproc_log=$(perl -e 'printf "%5.5f\n", log($ENV{nproc})/log(2);')

    # Round the logarithm to an integer
    rounded_nproc_log="$(printf '%.*f\n' 0 "$nproc_log")"

    # Set *-slabs to a power of 2 close to the num-threads value.
    # This reduces lock contention.
    slabs=$(( 2 ** rounded_nproc_log ))
else
    threads=1
    slabs=4
fi

printf "%s" $threads > /var/run/s6/container_environment/UNBOUND_THREADS
printf "%s" $slabs > /var/run/s6/container_environment/UNBOUND_SLABS
printf "%s" $msg_cache_size > /var/run/s6/container_environment/UNBOUND_MSG_CACHE_SIZE
printf "%s" $rr_cache_size > /var/run/s6/container_environment/UNBOUND_RR_CACHE_SIZE

[ "${AGH_ENABLED}" -eq 1 ] && \
    printf 5053 > /var/run/s6/container_environment/UNBOUND_PORT || \
    printf 53 > /var/run/s6/container_environment/UNBOUND_PORT
